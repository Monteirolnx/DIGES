// <auto-generated />
using System;
using Controle.Atividades.Infrastructure.BancoDeDados;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Controle.Atividades.Infrastructure.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20231126205446_Mig01")]
    partial class Mig01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Analista", b =>
                {
                    b.Property<Guid>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("codigo");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("ativo");

                    b.HasKey("Codigo");

                    b.ToTable("analista");

                    b.HasData(
                        new
                        {
                            Codigo = new Guid("dbaee3b0-7e5d-4340-add9-26bb67235d14"),
                            Email = "askaam@sf.prefeitura.sp.gov.br",
                            Nome = "Alex Kaam",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("1b5dfad3-6624-453b-a5b5-46e060e41c90"),
                            Email = "avieira@sf.prefeitura.sp.gov.br",
                            Nome = "Arthur Vieira",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("2d5c150d-6446-4195-a898-5b2b8e48c707"),
                            Email = "caandrade@sf.prefeitura.sp.gov.br",
                            Nome = "Cláudio Almeida",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("9a49d24b-b082-407e-b099-adc4130b941c"),
                            Email = "csmagno@sf.prefeitura.sp.gov.br",
                            Nome = "Cláudio Magno",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("4ae9913f-ab7c-4f68-8bb1-0c4e3a478f49"),
                            Email = "fmsilva@sf.prefeitura.sp.gov.br",
                            Nome = "Félix Silva",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("8ae0f6ba-aadf-4a3a-8229-a98db5f17b4e"),
                            Email = "gcsantanna@sf.prefeitura.sp.gov.br",
                            Nome = "Gabriel Capetini",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("74d372b7-a724-4154-87fa-ad7300e2450e"),
                            Email = "gmarrafon@sf.prefeitura.sp.gov.br",
                            Nome = "Glaucon Marrafon",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("86672458-bc3f-472d-82cb-c5fb7b5a563c"),
                            Email = "lcebarreto@sf.prefeitura.sp.gov.br",
                            Nome = "Luis Barreto",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("13f14f86-ee2b-4aa4-aedf-3c34daf87705"),
                            Email = "lfmleitao@sf.prefeitura.sp.gov.br",
                            Nome = "Luis Monteiro",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("f983a40c-5e7f-40c4-b5c9-b1f898f71713"),
                            Email = "rsmiranda@sf.prefeitura.sp.gov.br",
                            Nome = "Rafael Miranda",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("59c92c95-45c3-4508-b131-b29e5105ceca"),
                            Email = "rgsouza@sf.prefeitura.sp.gov.br",
                            Nome = "Renan Guedes",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("e41df73d-5dc8-429a-b630-686272b1a9ee"),
                            Email = "tsmachado@sf.prefeitura.sp.gov.br",
                            Nome = "Thiago Maximiliano",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Atividade", b =>
                {
                    b.Property<Guid>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cd_atividade");

                    b.Property<Guid?>("CodigoAnalista")
                        .HasColumnType("uuid")
                        .HasColumnName("codigo_analista");

                    b.Property<Guid?>("CodigoLider")
                        .HasColumnType("uuid")
                        .HasColumnName("codigo_lider");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<DateTime>("DtCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dt_criacao");

                    b.Property<DateTime>("DtFechamento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dt_fechamento");

                    b.Property<DateTime>("DtModificacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dt_modificacao");

                    b.Property<int?>("NumeroRedmine")
                        .HasColumnType("integer")
                        .HasColumnName("nm_redmine");

                    b.Property<string>("Sistema")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sistema");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Codigo");

                    b.HasIndex("CodigoAnalista");

                    b.HasIndex("CodigoLider");

                    b.ToTable("atividade");
                });

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Lider", b =>
                {
                    b.Property<Guid>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("codigo");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("ativo");

                    b.HasKey("Codigo");

                    b.ToTable("lider");

                    b.HasData(
                        new
                        {
                            Codigo = new Guid("bf899e46-a1de-419e-9ea2-37eabfc9f8c0"),
                            Email = "camendes@sf.prefeitura.sp.gov.br",
                            Nome = "Calemino Mendes",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("3add5538-6065-465a-8bfd-9abf7f98f7a8"),
                            Email = "fbrambilla@sf.prefeitura.sp.gov.br",
                            Nome = "Fernando Brambilla",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("2bbd0e0e-5739-45cd-81f0-7978c0ed85d3"),
                            Email = "rpioli@sf.prefeitura.sp.gov.br",
                            Nome = "Rafael Pioli",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("452c9ada-1116-43e0-adc5-ce93671f81e2"),
                            Email = "rodrigomallmann@sf.prefeitura.sp.gov.br",
                            Nome = "Rodrigo Guerra",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Observacao", b =>
                {
                    b.Property<Guid>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cd_observacao");

                    b.Property<Guid>("CodigoAtividade")
                        .HasColumnType("uuid")
                        .HasColumnName("cd_atividade");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data");

                    b.Property<string>("Registro")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("registro");

                    b.HasKey("Codigo");

                    b.HasIndex("CodigoAtividade");

                    b.ToTable("observacao");
                });

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Atividade", b =>
                {
                    b.HasOne("Controle.Atividades.Domain.Entidades.Analista", "Analista")
                        .WithMany()
                        .HasForeignKey("CodigoAnalista");

                    b.HasOne("Controle.Atividades.Domain.Entidades.Lider", "Lider")
                        .WithMany()
                        .HasForeignKey("CodigoLider");

                    b.Navigation("Analista");

                    b.Navigation("Lider");
                });

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Observacao", b =>
                {
                    b.HasOne("Controle.Atividades.Domain.Entidades.Atividade", "Atividade")
                        .WithMany("Historico")
                        .HasForeignKey("CodigoAtividade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atividade");
                });

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Atividade", b =>
                {
                    b.Navigation("Historico");
                });
#pragma warning restore 612, 618
        }
    }
}
