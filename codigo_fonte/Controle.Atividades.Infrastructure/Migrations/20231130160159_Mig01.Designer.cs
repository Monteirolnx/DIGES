// <auto-generated />
using System;
using Controle.Atividades.Infrastructure.BancoDeDados;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Controle.Atividades.Infrastructure.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20231130160159_Mig01")]
    partial class Mig01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Analista", b =>
                {
                    b.Property<Guid>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("codigo");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("ativo");

                    b.HasKey("Codigo");

                    b.ToTable("analista");

                    b.HasData(
                        new
                        {
                            Codigo = new Guid("c8c43f6f-8787-4227-a081-edf69c5b4e49"),
                            Email = "askaam@sf.prefeitura.sp.gov.br",
                            Nome = "Alex Kaam",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("28ffbf80-a65f-4f14-b472-f2d4703b5cec"),
                            Email = "avieira@sf.prefeitura.sp.gov.br",
                            Nome = "Arthur Vieira",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("80051f70-c8df-4af4-b469-010558b6c484"),
                            Email = "caandrade@sf.prefeitura.sp.gov.br",
                            Nome = "Cláudio Almeida",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("a5950909-66dd-4b29-958d-f89bf61e5a07"),
                            Email = "csmagno@sf.prefeitura.sp.gov.br",
                            Nome = "Cláudio Magno",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("e491e8fa-08ab-43f3-8e5c-b634bea42427"),
                            Email = "fmsilva@sf.prefeitura.sp.gov.br",
                            Nome = "Félix Silva",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("fa06cdd0-4e49-4d40-bcc5-fccc45bff2b3"),
                            Email = "gcsantanna@sf.prefeitura.sp.gov.br",
                            Nome = "Gabriel Capetini",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("01150ec6-79e6-4255-87a1-a927dd30dcfa"),
                            Email = "gmarrafon@sf.prefeitura.sp.gov.br",
                            Nome = "Glaucon Marrafon",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("22e63578-fb4d-4166-83c9-c230f7c5f04c"),
                            Email = "lcebarreto@sf.prefeitura.sp.gov.br",
                            Nome = "Luis Barreto",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("ab384029-c921-41c5-ad44-dd06efa5bd98"),
                            Email = "lfmleitao@sf.prefeitura.sp.gov.br",
                            Nome = "Luis Monteiro",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("0114ca8d-f2d9-45d6-95f3-0cca5981b211"),
                            Email = "rsmiranda@sf.prefeitura.sp.gov.br",
                            Nome = "Rafael Miranda",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("fe1288c6-327a-4b36-9b54-7d801fce63af"),
                            Email = "rgsouza@sf.prefeitura.sp.gov.br",
                            Nome = "Renan Guedes",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("f5099e10-c19f-40c7-8b1f-38ddc562b1f2"),
                            Email = "tsmachado@sf.prefeitura.sp.gov.br",
                            Nome = "Thiago Maximiliano",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Atividade", b =>
                {
                    b.Property<Guid>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cd_atividade");

                    b.Property<Guid?>("CodigoAnalista")
                        .HasColumnType("uuid")
                        .HasColumnName("codigo_analista");

                    b.Property<Guid?>("CodigoLider")
                        .HasColumnType("uuid")
                        .HasColumnName("codigo_lider");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<DateTime>("DtCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dt_criacao");

                    b.Property<DateTime?>("DtFechamento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dt_fechamento");

                    b.Property<DateTime?>("DtModificacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dt_modificacao");

                    b.Property<int?>("NumeroRedmine")
                        .HasColumnType("integer")
                        .HasColumnName("nm_redmine");

                    b.Property<string>("Sistema")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sistema");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Codigo");

                    b.HasIndex("CodigoAnalista");

                    b.HasIndex("CodigoLider");

                    b.ToTable("atividade");
                });

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Lider", b =>
                {
                    b.Property<Guid>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("codigo");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("ativo");

                    b.HasKey("Codigo");

                    b.ToTable("lider");

                    b.HasData(
                        new
                        {
                            Codigo = new Guid("9c91bd6b-3adc-4d30-88a1-f372ba7154f2"),
                            Email = "camendes@sf.prefeitura.sp.gov.br",
                            Nome = "Calemino Mendes",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("16c74794-4395-4661-9d37-5533d390dc43"),
                            Email = "fbrambilla@sf.prefeitura.sp.gov.br",
                            Nome = "Fernando Brambilla",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("11e41433-bbb2-437d-8db1-fe290a71e943"),
                            Email = "rpioli@sf.prefeitura.sp.gov.br",
                            Nome = "Rafael Pioli",
                            Status = 1
                        },
                        new
                        {
                            Codigo = new Guid("0da8e86f-1667-49eb-bbeb-08a5ae011b83"),
                            Email = "rodrigomallmann@sf.prefeitura.sp.gov.br",
                            Nome = "Rodrigo Guerra",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Observacao", b =>
                {
                    b.Property<Guid>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cd_observacao");

                    b.Property<Guid>("CodigoAtividade")
                        .HasColumnType("uuid")
                        .HasColumnName("cd_atividade");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data");

                    b.Property<string>("Registro")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("registro");

                    b.HasKey("Codigo");

                    b.HasIndex("CodigoAtividade");

                    b.ToTable("observacao");
                });

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Atividade", b =>
                {
                    b.HasOne("Controle.Atividades.Domain.Entidades.Analista", "Analista")
                        .WithMany()
                        .HasForeignKey("CodigoAnalista");

                    b.HasOne("Controle.Atividades.Domain.Entidades.Lider", "Lider")
                        .WithMany()
                        .HasForeignKey("CodigoLider");

                    b.Navigation("Analista");

                    b.Navigation("Lider");
                });

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Observacao", b =>
                {
                    b.HasOne("Controle.Atividades.Domain.Entidades.Atividade", "Atividade")
                        .WithMany("Historico")
                        .HasForeignKey("CodigoAtividade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atividade");
                });

            modelBuilder.Entity("Controle.Atividades.Domain.Entidades.Atividade", b =>
                {
                    b.Navigation("Historico");
                });
#pragma warning restore 612, 618
        }
    }
}
